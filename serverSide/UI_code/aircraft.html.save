<!-- 
Jet Engine rendering 
Created: 13th April 2017
Author: Debashish Pradhan
Description: This code renders the Jet Engine model from json generated by Blender 
Additional controls are given such as: a. Changing the speed of the engine
b. Starting and Stopping the Engine 
 -->

<!DOCTYPE html>
<html lang="en">
    <head>
        <title>three.js webgl - animation - skinning</title>
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0">
        <style>
            body {
                background-color: #000000;
                margin: 0px;
                overflow: hidden;
            }
            img {
                max-height: 100%;
                max-width: 100%;
            }

            .imagePlaceholder1 {
                position: absolute;
                width: 400px;
                height: 200px;
                left: 80%;
                bottom: 45%;
                pointer-events: none;
            }

            .imagePlaceholder2 {
                position: absolute;
                width: 400px;
                height: 200px;
                left: 0%;
                bottom: 45%;
                pointer-events: none;
            }

            .imagePlaceholder4 {
                position: absolute;
                width: 100%;
                height: 100%;
                left: 0%;
                bottom: 0%;
                /*z-index: -1000;*/
                pointer-events: none;
            }

            /* The Architecture Modal (background) */
            .modal {
                display: none; /* Hidden by default */
                position: fixed; /* Stay in place */
                z-index: 1; /* Sit on top */
                padding-top: 150px; /* Location of the box */
                left: 0;
                top: 0;
                width: 100%; /* Full width */
                height: 100%; /* Full height */
                overflow: auto; /* Enable scroll if needed */
                background-color: rgb(0,0,0); /* Fallback color */
                background-color: rgba(0,0,0,0.7); /* Black w/ opacity */
            }

            /* Modal Content */
            .modal-content {
                position: relative;
                background-color: #fefefe;
                margin: auto;
                padding: 0;
                border: 1px solid #888;
                width: 80%;
                box-shadow: 0 4px 8px 0 rgba(0,0,0,0.2),0 6px 20px 0 rgba(0,0,0,0.19);
                -webkit-animation-name: animatetop;
                -webkit-animation-duration: 0.4s;
                animation-name: animatetop;
                animation-duration: 0.4s
            }

            /* Add Animation */
            @-webkit-keyframes animatetop {
                from {top:-300px; opacity:0}
                to {top:0; opacity:1}
            }

            @keyframes animatetop {
                from {top:-300px; opacity:0}
                to {top:0; opacity:1}
            }

            /* The Close Button */
            .close {
                color: #000000;
                float: right;
                font-size: 28px;
                font-weight: bold;
            }

            .close:hover,
            .close:focus {
                color: #000000;
                text-decoration: none;
                cursor: pointer;
            }

            .modal-header {
                padding: 2px 16px;
                background-color: #ffffff;
                color: white;
            }

            .modal-body {
                padding: 2px 16px;
            }


            /* css for speedometer graph*/

            #speedometer {
                position: absolute;
                bottom: 0%;
                left: 41%;
                text-align: right;
                pointer-events: none;
            }

            /* css for vibration graph*/

            #vibration {
                position: absolute;
                bottom: 5%;
                left: 73%;
                text-align: right;
                pointer-events: none;
            }

            /* css for load graph */

            #load {
                position: absolute;
                bottom: 5%;
                left: 5%;
                text-align: right;
                pointer-events: none;
            }

            .line {
                fill: none;
                stroke: rgba(127,255,255,0.75);
                stroke-width: 2px;
            }

            .tick text{
                fill: #C0C0C0;
            }
            /* css for temperature graph*/

            #temperature {
                position: absolute;
                bottom: 13%;
                left: 64%;
                text-align: left;
                pointer-events: none;
            }

            /* css for thrust lever*/

            #thrustLever {
                position: absolute;
                bottom: 10%;
                left: 30%;
                pointer-events: none;
            }

            #thrustLever .ticks {
              font: 10px sans-serif;
              pointer-events: none;
            }

            .track,
            .track-inset,
            .track-overlay {
              stroke-linecap: square;
            }

            .track {
              stroke: #fff;
              stroke-opacity: 0.5;
              stroke-width: 10px;
              pointer-events: none;
            }

            .track-inset {
              stroke: #000;
              stroke-width: 8px;
              pointer-events: none;
            }

            .track-overlay {
              pointer-events: stroke;
              stroke-width: 50px;
              stroke: transparent;
              cursor: crosshair;
            }

            .handle {
              fill: rgba(255,127,80,0.3);
              stroke: rgba(255,127,80,1);
              stroke-opacity: 0.5;
              stroke-width: 1.25px;
              pointer-events: all;
            }


            .unselectable {
            -moz-user-select: -moz-none;
            -khtml-user-select: none;
            -webkit-user-select: none;
            -ms-user-select: none;
            user-select: none;
            }

            /* css formats for the speedometer gauge */
            .gauge .domain {
                stroke-width: 2px;
                stroke: #fff;
            }

            .gauge .tick line {
                stroke: #fff;
                stroke-width: 2px;
            }
            
            .gauge line {
                stroke: #fff;
            }

            .gauge .arc, .gauge .cursor {
                opacity: 0;
            }

            .gauge .major {
                fill: #fff;
                font-size: 10px;
                font-family: 'Play', verdana, sans-serif;
                font-weight: normal;
            }
            
            .gauge .indicator {
                stroke: #EE3311;
                fill: #000;
                stroke-width: 4px;
            }

            /* css formats for the segment display */
            .segdisplay .on {
                fill: #00FFFF;

            }

            .segdisplay .off {
                fill: #00FFFF;
                opacity: 0.15;
            }

            /* css for Digital Twin button */

            #title {
                position: absolute;
                top: 1%;
                width: 100%;
                text-align: center;
                pointer-events: none;
            }

            #title .element {
                width: 200px;
                height: 160px;
                box-shadow: 0px 0px 12px rgba(0,255,255,0.5);
                border: 1px solid rgba(192,192,192,0.25);
                text-align: center;
                cursor: default;
            }
            #title button {
                color: rgba(192,192,192,0.75);
                background: transparent;
                outline: 1px solid rgba(192,192,192,0.75);
                border: 0px;
                padding: 5px 10px;
                cursor: pointer;
            }

            /* css for throttle label */

            #throttleTitle {
                position: absolute;
                bottom: 10%;
                width: 0%;
                left:30%;
                text-align: center;
                pointer-events: none;
            }

            #throttleTitle .element {
                width: 200px;
                height: 160px;
                box-shadow: 0px 0px 12px rgba(0,255,255,0.5);
                border: 1px solid rgba(192,192,192,0.25);
                text-align: center;
                cursor: default;
            }
            #throttleTitle button {
                color: rgba(192,192,192,0.75);
                background: transparent;
                outline: 0px solid rgba(192,192,192,0.75);
                border: 0px;
                padding: 5px 10px;
                cursor: pointer;
            }

            /* css for speedometer label */

            #speedTitle {
                position: absolute;
                bottom: 10%;
                width: 0%;
                left:46%;
                text-align: center;
                pointer-events: none;
            }

            #speedTitle .element {
                width: 200px;
                height: 160px;
                box-shadow: 0px 0px 12px rgba(0,255,255,0.5);
                border: 1px solid rgba(192,192,192,0.25);
                text-align: center;
                cursor: default;
            }
            #speedTitle button {
                color: rgba(192,192,192,0.75);
                background: transparent;
                outline: 0px solid rgba(192,192,192,0.75);
                border: 0px;
                padding: 5px 10px;
                cursor: pointer;
            }

            /* css for temperature label */

            #temperatureTitle {
                position: absolute;
                bottom: 10%;
                width: 0%;
                left:61%;
                text-align: center;
                pointer-events: none;
            }

            #temperatureTitle .element {
                width: 200px;
                height: 160px;
                box-shadow: 0px 0px 12px rgba(0,255,255,0.5);
                border: 1px solid rgba(192,192,192,0.25);
                text-align: center;
                cursor: default;
            }
            #temperatureTitle button {
                color: rgba(192,192,192,0.75);
                background: transparent;
                outline: 0px solid rgba(192,192,192,0.75);
                border: 0px;
                padding: 5px 10px;
                cursor: pointer;
            }

            /* css for vibration label */

            #vibrationTitle {
                position: absolute;
                bottom: 2%;
                width: 0%;
                left:80%;
                text-align: center;
                pointer-events: none;
            }

            #vibrationTitle .element {
                width: 200px;
                height: 160px;
                box-shadow: 0px 0px 12px rgba(0,255,255,0.5);
                border: 1px solid rgba(192,192,192,0.25);
                text-align: center;
                cursor: default;
            }
            #vibrationTitle button {
                color: rgba(192,192,192,0.75);
                background: transparent;
                outline: 0px solid rgba(192,192,192,0.75);
                border: 0px;
                padding: 5px 10px;
                cursor: pointer;
            }
        
            /* css for load label */

            #loadTitle {
                position: absolute;
                bottom: 2%;
                width: 0%;
                left:12%;
                text-align: center;
                pointer-events: none;
            }

            #loadTitle .element {
                width: 200px;
                height: 160px;
                box-shadow: 0px 0px 12px rgba(0,255,255,0.5);
                border: 1px solid rgba(192,192,192,0.25);
                text-align: center;
                cursor: default;
            }
            #loadTitle button {
                color: rgba(192,192,192,0.75);
                background: transparent;
                outline: 0px solid rgba(192,192,192,0.75);
                border: 0px;
                padding: 5px 10px;
                cursor: pointer;
            }

            /* css for Architecture button */
            #imagePlaceholder3 {
                position: absolute;
                top: 1%;
                left: 1%;
                width: 6%;
                text-align: center;
            }

            .element {
                width: 120px;
                height: 160px;
                box-shadow: 0px 0px 12px rgba(0,255,255,0.5);
                border: 1px solid rgba(192,192,192,0.25);
                text-align: center;
                cursor: default;
            }

            .element:hover {
                box-shadow: 0px 0px 12px rgba(0,255,255,0.75);
                border: 1px solid rgba(255,127,80,0.3);
            }
            button {
                color: rgba(192,192,192,0.75);
                background: transparent;
                outline: 1px solid rgba(255,127,80,1);
                border: 0px;
                padding: 5px 10px;
                cursor: pointer;
            }
            button:hover {
                background-color: rgba(255,127,80,0.3);
            }
            button:active {
                color: #000000;
                background-color: rgba(255,127,80,1);
            }


            /* css for Jet Engine button */

            #menu {
                position: absolute;
                bottom: 20px;
                width: 100%;
                text-align: center;
            }

            .element {
                width: 120px;
                height: 160px;
                box-shadow: 0px 0px 12px rgba(0,255,255,0.5);
                border: 1px solid rgba(192,192,192,0.25);
                text-align: center;
                cursor: default;
            }

            .element:hover {
                box-shadow: 0px 0px 12px rgba(0,255,255,0.75);
                border: 1px solid rgba(255,127,80,0.3);
            }
            button {
                color: rgba(192,192,192,0.75);
                background: transparent;
                outline: 1px solid rgba(255,127,80,1);
                border: 0px;
                padding: 5px 10px;
                cursor: pointer;
            }
            button:hover {
                background-color: rgba(255,127,80,0.3);
            }
            button:active {
                color: #000000;
                background-color: rgba(255,127,80,1);
            }

        </style>
    </head>

<body>

    <div id ="webGL-container"></div>
    <div id="speedometer"></div>
    <div id="vibration"></div>
    <div id="temperature"></div>
    <div id="thrustLever"></div>
    <div id="load"></div>
    <div class="imagePlaceholder1"><img src="./images/frontview_wireframe.png"></div>
    <div class="imagePlaceholder2"><img src="./images/sideview_wireframe.png"></div>
    <div class="imagePlaceholder4"><img id ="canvasBackImage" src="./images/layout_newblue.svg"></div>
    <link href='https://fonts.googleapis.com/css?family=Orbitron' rel='stylesheet'>
    <div id="menu" >
    <button id="Jet" style="font-family: Orbitron;">Jet Engine</button>
    </div>
    <div id="imagePlaceholder3">
    <button id="architecture" style="font-family: Orbitron;">Architecture</button>
    </div>
    <div id="archModal" class="modal">

        <!-- Modal content -->
        <div class="modal-content">
            <div class="modal-header">
                <span class="close">&times;</span>
            </div>
            <div class="modal-body">
                <img src="./images/aws_lambda_architecture.svg" style="height:400px;">
            </div>
        </div>

    </div>
    <div id="title"><button id="digitalTwin" style="width: 400px;font-family: Orbitron;">D&nbsp;&nbsp;i&nbsp;&nbsp;g&nbsp;&nbsp;i&nbsp;&nbsp;t&nbsp;&nbsp;a&nbsp;&nbsp;l&nbsp;&nbsp;&nbsp;&nbsp; T&nbsp;&nbsp;w&nbsp;&nbsp;i&nbsp;&nbsp;n</button></div>
    <div id="throttleTitle"><button id="throttleTitle" style="width: 100px;color:coral;font-family: Orbitron;">Throttle</button></div>
    <div id="temperatureTitle"><button id="temperatureTitle" style="width: 200px;color:coral;font-family: Orbitron;">Temperature ( &#0176;C )</button></div>
    <div id="speedTitle"><button id="speedTitle" style="width: 150px;color:coral;font-family: Orbitron;">Speed ( rpm )</button></div>
    <div id="vibrationTitle"><button id="vibrationTitle" style="width: 200px;color:coral;font-family: Orbitron;">Vibration ( mm / sec )</button></div>
    <div id="loadTitle"><button id="loadTitle" style="width: 150px;color:coral;font-family: Orbitron;">Load ( g )</button></div>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/2.1.3/jquery.min.js"></script>
    <script src="https://threejs.org/build/three.min.js"></script>
    <script type="text/javascript" src="https://d3js.org/d3.v4.min.js"></script>
    <script>
        let d3v4 = d3;
        window.d3 = null;
    </script>
    <script src="Detector.js"></script>
    <script src="stats.min.js"></script>
    <script src="OrbitControls.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/1.7.2/socket.io.min.js"></script>
    <script src="dat.gui.min.js"></script>
    <link rel='stylesheet' href='https://fonts.googleapis.com/css?family=Play:700,400' type='text/css'>
    
    
    <script type="text/javascript" src="https://iop.io/js/vendor/d3.v3.min.js"></script>
    <script>
        let d3v3 = d3;
        window.d3 = d3v4;
    </script>
    <script type="text/javascript" src="https://iop.io/js/vendor/polymer/PointerEvents/pointerevents.js"></script>
    <script type="text/javascript" src="https://iop.io/js/vendor/polymer/PointerGestures/pointergestures.js"></script>
     <script type="text/javascript" src="iopctrl.js"></script>

    <script type="text/javascript" src="thermometer.js"></script>
    
    <script>

    $(function(){
        $('#canvasBackImage').css({
            'width': $('.imagePlaceholder4').width() + 'px',
            'height': $('.imagePlaceholder4').height() + 'px'
        });
    if ( ! Detector.webgl ) Detector.addGetWebGLMessage();

    /*global variables*/
    var scene, camera, renderer;
    var controls, guiControls;
    var gui, playbackConfig = {
        wireframe: false,
        animation: false,
        showGrid: true
    };
    var thrust = 0;
    var stats;
    var mixer;
    var SCREEN_WIDTH, SCREEN_HEIGHT;
    var loader, model, animation;
    var clock = new THREE.Clock();
    var increment = 2;
    var lastVibrationDataTime = 0;
    var lastLoadDataTime = 0;

    var thrustToSpeed = d3.scaleLinear()
        .domain([0, 100])
        .range([0, 7])
        .clamp(true);

    var loadSocketData = [];
    var loadExpectedData = [];
    var 
vibrationSocketData = [];
    var vibrationAnomalySocketData = [];

    /* d3 code for rpm data*/

    var rpmGauge, segDisp, rpmSVG;
    var thrustToRPM = d3.scaleLinear().domain([0, 7]).range([0, 3000]);
    var thrustToExpectedLoad = d3.scaleLinear().domain([0, 7]).range([0, 160]);
    renderRPMGraph();

    function renderRPMGraph () {
        rpmSVG = d3.select("#speedometer")
            .append("svg:svg")
            .attr("width", 400)
            .attr("height", 400);
        rpmGauge = iopctrl.arcslider()
            .radius(120)
            .events(false)
            .indicator(iopctrl.defaultGaugeIndicator);
        rpmGauge.axis().orient("in")
            .normalize(true)
            .ticks(5)
            .tickSubdivide(3)
            .tickSize(10, 8, 10)
            .tickPadding(5)
            .scale(d3.scaleLinear()
                .domain([0, 3500])
                .range([-3*Math.PI/4, 3*Math.PI/4]));
        segDisp = iopctrl.segdisplay()
            .width(80)
            .digitCount(6)
            .negative(false)
            .decimals(0);
        rpmSVG.append("g")
            .attr("class", "segdisplay")
            .attr("transform", "translate(130, 200)")
            .call(segDisp);
        rpmSVG.append("g")
            .attr("class", "gauge")
            .call(rpmGauge);
        segDisp.value(0);
        rpmGauge.value(0);
    }

    /*----------------------------------------------------------------------------------------------------*/

    /* d3 code for thrust lever */
    renderThrustLever();

    function renderThrustLever() {
            var svg = d3.select("#thrustLever")
                .append("svg:svg")
                .attr("width", 100)
                .attr("height", 200);

            var margin = {right:50, left:50};
            var y = d3.scaleLinear()
                .domain([100, 0])
                .range([0, 100])
                .clamp(true);
            var lastThrustVal = 0;

            var slider = svg.append("g")
                .attr("class", "slider")
                .attr("transform", "translate(" + margin.left + "," + 50 + ")");

            slider.append("line")
                .attr("class", "track")
                .attr("transform", "rotate(90)")
                .attr("x1", y.range()[1])
                .attr("x2", y.range()[0])
                .select(function() { return this.parentNode.appendChild(this.cloneNode(true)); })
                .attr("class", "track-inset")
                .select(function() { return this.parentNode.appendChild(this.cloneNode(true)); })
                .attr("class", "track-overlay")
                .call(d3.drag()
                    .on("start.interrupt", function() { slider.interrupt(); })
                    .on("start drag", function() { hue(y.invert(d3.event.y)); }));

            slider.insert("g", ".track-overlay")
                .attr("class", "ticks")
                .style("fill", "white")
                .attr("transform", "translate(40," + 5 + ")")
                .selectAll("text")
                .data(y.ticks(5))
                .enter().append("text")
                .attr("y", y)
                .attr("text-anchor", "middle")
                .text(function(d) { return d + "%"; });

            var handle = slider.insert("rect", ".track-overlay")
                .attr("class", "handle")
                .attr("transform", "rotate(90)")
                // .attr("r", 10);
                .attr("width", "10px")
                .attr("height", "50px")
                .attr("y", -25);

            slider.transition() // Gratuitous intro!
                .duration(750)
                .tween("hue", function() {
                    var i = d3.interpolate(0, 0);
                    return function(t) { hue(i(t)); };
                });

            function hue(h) {
                handle.attr("x", y(h));
                if (lastThrustVal != Math.round(h)) {
                    lastThrustVal = Math.round(h);
                    changeThrust(Math.round(h));
                }
            }
        }
    /* ---------------------------------------------------------------------------------------------------------*/

    /* d3 code for temperature data */

    var thermometer, thermoContainer;
    renderTemperatureGraph();

    function renderTemperatureGraph () {
        thermometer = new Thermometer();
        thermoContainer = document.getElementById('temperature');
        thermometer.render(thermoContainer, 24, 4, 65); //Actual, Min, Max
    }

    /* ---------------------------------------------------------------------------------------------------------*/

    /* d3 code for vibration data */

    // initializing the svg
    var vibration_margin = {top: 20, right: 20, bottom: 30, left: 50},
    vibration_width = 400 - vibration_margin.left - vibration_margin.right,
    vibration_height = 200 - vibration_margin.top - vibration_margin.bottom;

    // append the svg obgect to the body of the page
    // appends a 'group' element to 'svg'
    // moves the 'group' element to the top left margin
    var vibration_svg = d3.select("#vibration").append("svg")
        .attr("width", vibration_width + vibration_margin.left + vibration_margin.right)
        .attr("height", vibration_height + vibration_margin.top + vibration_margin.bottom)
      .append("g")
        .attr("transform",
              "translate(" + vibration_margin.left + "," + vibration_margin.top + ")");


    renderVibrationGraph ();

    function renderVibrationGraph () {
        // set the ranges
        var vibration_x = d3.scaleTime().range([0, vibration_width]);
        var vibration_y = d3.scaleLinear().range([vibration_height, 0]);

        // define the line
        var vibration_valueline = d3.line()
            .x(function(d) { return vibration_x(d.timestamp); })
            .y(function(d) { return vibration_y(parseFloat(d.value)); });

        var sampleVibrationData =
        [
               {
                  "timestamp": "1428929880000",
                  "value": 63.98,
                   "flag": "0"
               },
               {
                  "timestamp": "1428929940000",
                  "value": 67,
                   "flag": "0"
               },
               {
                  "timestamp": "1428930000000",
                  "value": 89.7,
                   "flag": "0"
               },
               {
                  "timestamp": "1428930060000",
                  "value": 99,
                   "flag": "0"
               },
               {
                  "timestamp": "1428930120000",
                  "value": 166.7,
                   "flag": "0"
               },
               {
                  "timestamp": "1428930180000",
                  "value": 130.28,
                   "flag": "0"
               }
            ];

        var vibrationData = sampleVibrationData;
        if(vibrationSocketData.length != 0){
            vibrationData = vibrationAnomalySocketData;
        }

        // Scale the range of the data
        vibration_x.domain(d3.extent(vibrationData, function(d) { return d.timestamp; }));
//        vibration_y.domain(d3.extent(vibrationData, function(d) { return parseFloat(d.value); }));
        vibration_y.domain([0, 1000]);

        // remove previous line path
        vibration_svg.selectAll("*").remove();

        // Add the valueline path.
        vibration_svg.append("path")
            .data([vibrationData])
            .attr("class", "line")
            .style("stroke", "#ff7f50")
            .attr("d", vibration_valueline);

        // Add the dots
        vibration_svg.selectAll("dot")
            .data(vibrationData)
            .enter().append("circle")
            .attr("fill", "#ffffff")
            .attr("r", function (d) {
                if (d.flag == "1") {
                    return 3.5;
                }
                else {
                    return 0;
                }
            })
            .attr("cx", function(d) { return vibration_x(d.timestamp); })
            .attr("cy", function(d) { return vibration_y(parseFloat(d.value)); });

        // Add the X Axis
        vibration_svg.append("g")
            .attr("transform", "translate(0," + vibration_height + ")")
            .call(d3.axisBottom(vibration_x));

        // Add the Y Axis
        vibration_svg.append("g")
            .call(d3.axisLeft(vibration_y).ticks(5));
    }

    /* ---------------------------------------------------------------------------------------------------------*/

    /* d3 code for load sensor */

    // initializing the svg
    var load_margin = {top: 20, right: 20, bottom: 30, left: 50},
    load_width = 400 - load_margin.left - load_margin.right,
    load_height = 200 - load_margin.top - load_margin.bottom;

    // append the svg obgect to the body of the page
    // appends a 'group' element to 'svg'
    // moves the 'group' element to the top left margin
    var load_svg = d3.select("#load").append("svg")
        .attr("width", load_width + load_margin.left + load_margin.right)
        .attr("height", load_height + load_margin.top + load_margin.bottom)
      .append("g")
        .attr("transform",
              "translate(" + load_margin.left + "," + load_margin.top + ")");


    renderLoadGraph();

    function renderLoadGraph() {
        // set the ranges
        var load_x = d3.scaleTime().range([0, load_width]);
        var load_y = d3.scaleLinear().range([load_height, 0]);

        // define the 1st line
        var load_valueline = d3.line()
            .x(function(d) { return load_x(d.timestamp); })
            .y(function(d) { return load_y(parseFloat(d.value)); });

        // define the 2nd line
        var load_valueline2 = d3.line()
            .x(function(d) { return load_x(d.timestamp); })
            .y(function(d) { return load_y(d.value); });



        var sampleLoadData =
        [
               {
                  "timestamp": "1428929880000",
                  "value": 63.98,
                  "anomaly": 45.56
               },
               {
                  "timestamp": "1428929940000",
                  "value": 67,
                  "anomaly": 67.89
               },
               {
                  "timestamp": "1428930000000",
                  "value": 89.7,
                  "anomaly": 78.54
               },
               {
                  "timestamp": "1428930060000",
                  "value": 99,
                  "anomaly": 89.23
               },
               {
                  "timestamp": "1428930120000",
                  "value": 130.28,
                  "anomaly": 99.23
               },
               {
                  "timestamp": "1428930180000",
                  "value": 166.7,
                  "anomaly": 101.34
               }
            ];


        var loadData = sampleLoadData;
        if(loadSocketData.length != 0){
            loadData = loadSocketData;
        }


        // Scale the range of the data
        load_x.domain(d3.extent(loadData, function(d) { return d.timestamp; }));
        load_y.domain(d3.extent(loadData, function(d) {
          return  parseFloat(d.value); }));

        // remove previous line path
        load_svg.selectAll("*").remove();

        // Add the valueline path.
        load_svg.append("path")
          .data([loadData])
          .attr("class", "line")
          .attr("d", load_valueline);

        // Add the valueline2 path.
        load_svg.append("path")
          .data([loadExpectedData])
          .attr("class", "line")
          .style("stroke", "red")
          .attr("d", load_valueline2);

        // Add the X Axis
        load_svg.append("g")
          .attr("transform", "translate(0," + load_height + ")")
          .call(d3.axisBottom(load_x));

        // Add the Y Axis
        load_svg.append("g")
          .call(d3.axisLeft(load_y).ticks(5));
    }


    /* ---------------------------------------------------------------------------------------------------------*/

    /* rendering the jet engine */
    function init(){
        /*creates empty scene object and renderer*/
        scene = new THREE.Scene();
        scene.position.x = -0.4;
        scene.position.y = -2.3;
        scene.position.z = 0;
        /* initialize camera object */

        camera =  new THREE.PerspectiveCamera(45, window.innerWidth/window.innerHeight, .1, 500);
        // camera.position.x = -4.332551350086463;
        // camera.position.y = 3.065082568306755;
        // camera.position.z = 5.443640428325232;
        camera.position.x = -7.332551350086463;
        camera.position.y = 1.065082568306755;
        camera.position.z = 7.443640428325232;
        camera.lookAt(scene.position);
        renderer = new THREE.WebGLRenderer({antialias:false});

        // renderer.setClearColor(0x6A6A6A);
        // renderer.setClearColor(0x000000);
        renderer.setSize(window.innerWidth, window.innerHeight);
        renderer.shadowMapEnabled= false;
        renderer.shadowMapSoft = false;

        /*add controls*/
        controls = new THREE.OrbitControls( camera, renderer.domElement );

        var button = document.getElementById( 'Jet' );
        button.addEventListener( 'click', function ( event ) {
        onShowModel();
        }, false );

        // Get the modal
        var modal = document.getElementById('archModal');

        // Get the button that opens the modal
        var btn = document.getElementById("imagePlaceholder3");

        // Get the <span> element that closes the modal
        var span = document.getElementsByClassName("close")[0];

        // When the user clicks the button, open the modal
        btn.onclick = function() {
            modal.style.display = "block";
        }

        // When the user clicks on <span> (x), close the modal
        span.onclick = function() {
            modal.style.display = "none";
        }

        // When the user clicks anywhere outside of the modal, close it
        window.onclick = function(event) {
            if (event.target == modal) {
                modal.style.display = "none";
            }
        }


        /* Adding smoke to the scene*/

        // smokeTexture = THREE.ImageUtils.loadTexture('./images/Smoke-Element.png');
        // smokeMaterial = new THREE.MeshLambertMaterial({color: 0xffffff, opacity: 0.9, map: smokeTexture, transparent: true});
        // smokeGeo = new THREE.PlaneGeometry(300,300);
        // smokeParticles = [];

        // for (p = 0; p < 150; p++) {
        // var particle = new THREE.Mesh(smokeGeo,smokeMaterial);
        // particle.position.set(Math.random()*500-250,Math.random()*500-250,Math.random()*1000-100);
        // particle.rotation.z = Math.random() * 360;
        // scene.add(particle);
        // smokeParticles.push(particle);
        // }

        // $('#webGL-container').append( renderer.domElement );

        /*adds gui controls to scene*/
        // gui = new dat.GUI();

        // gui.add( playbackConfig, 'wireframe', false).onChange(function() {
        //     scene.children.material.setWireframe = playbackConfig.wireframe;});

        $("#webGL-container").append(renderer.domElement);

    }

    function onShowModel( event ) {

        loader = new THREE.ObjectLoader();
        loader.load('./models/jetEngine_newest.json', function ( loadedScene ) {

            sceneAnimationClip = loadedScene.animations[0];
            scene = loadedScene;

            mixer = new THREE.AnimationMixer( scene );

            mixer.clipAction( sceneAnimationClip ).play();

            // add grid to the scene

            var grid = new THREE.GridHelper( 100, 50, 0x020202, 0x020202 );
            grid.rotateOnAxis( new THREE.Vector3( 0, 1, 0 ), 90 * ( Math.PI/180 ) );
            scene.add( grid );

            // add star field in the background

            var starsGeometry = new THREE.Geometry();

            for ( var i = 0; i < 30000; i ++ ) {

                var star = new THREE.Vector3();
                star.x = THREE.Math.randFloatSpread( 2000 );
                star.y = THREE.Math.randFloatSpread( 2000 );
                star.z = THREE.Math.randFloatSpread( 2000 );

                starsGeometry.vertices.push( star );

            }

            var starsMaterial = new THREE.PointsMaterial( { color: 0x888888 } );

            var starField = new THREE.Points( starsGeometry, starsMaterial );

            scene.add( starField );

        } );
    }

    function render() {
        controls.update();
        var delta = clock.getDelta();
        if(mixer){
            mixer.update(delta * thrust);
            if(thrust > 5) {
                scene.children[1].material.specular = {
                    r: 1.000,
                    g: 0.003,
                    b: 0.000
                }
            }
            else {
                scene.children[1].material.specular= {
                    r: 0.498,
                    g: 1.000,
                    b: 1.000
                }
            }
        }



    }

    function animate(){
        requestAnimationFrame(animate);
        // evolveSmoke();
        render();
        renderer.render(scene, camera);
    }

    // function evolveSmoke() {
    //     var delta = clock.getDelta();
    //     var sp = smokeParticles.length;
    //         while(sp--) {
    //             smokeParticles[sp].rotation.z += (delta * 0.2);
    //         }
    //     }
    
    init();
    animate();
    
    $(window).resize(function(){
        SCREEN_WIDTH = window.innerWidth;
        SCREEN_HEIGHT = window.innerHeight;
        camera.aspect = SCREEN_WIDTH / SCREEN_HEIGHT;
        camera.updateProjectionMatrix();
        renderer.setSize( SCREEN_WIDTH, SCREEN_HEIGHT );

        $('#canvasBackImage').css({
            'width': $('.imagePlaceholder4').width() + 'px',
            'height': $('.imagePlaceholder4').height() + 'px'
        });
    });

    const socket = io('/aircraft_demo',{path:'/aircraft/socket.io'});
    connectSockets();

    function connectSockets () {
        socket.on('connect', function (ob) {
            console.log("Connected to server");
        });
        socket.on('message', function (msg) {
            console.log("On message: " + msg);
        });
        socket.on('vibration_data', msg=>{
            msg = msg.filter(function (val, index) {
                if (val.timestamp < lastVibrationDataTime) {
                    return false;
                } else {
                    lastVibrationDataTime = val.timestamp;
                    return true;
                }
            });
            vibrationSocketData = vibrationSocketData.concat(msg);
            vibrationSocketData.sort(function(a, b){
                const keyA = a.timestamp,
                    keyB = b.timestamp;
                // Compare the 2 dates
                if(keyA < keyB) return -1;
                if(keyA > keyB) return 1;
                return 0;
            });
            vibrationSocketData = vibrationSocketData.filter((object, index, self) =>
                index === self.findIndex((o) => (
                    o.timestamp === object.timestamp && o.value === object.value
                ))
            );
            vibrationSocketData.splice(0, vibrationSocketData.length - 50);

//            console.log("vibration data:", vibrationSocketData);

            var vibrationPostDataFormat = {
                "data": {
                    "names": ["timestamp", "value", "flag"],
                    "ndarray": []
                }
            };

            for (var i=0; i<vibrationSocketData.length;i++) {
                vibrationPostDataFormat.data.ndarray.push([vibrationSocketData[i].timestamp, vibrationSocketData[i].value, vibrationSocketData[i].flag]);
            }

            fetch(`https://ird.mu-sigma.com/models/46-traefik/121-digital-twin-anomaly-detection-18.10.05/predict`, {
                method: "POST",
                mode: 'no-cors',
                headers: {
                    "Content-Type": "application/x-www-form-urlencoded",
                    "accept": "text/plain"
                },
                body: 'json=' + encodeURI(JSON.stringify(vibrationPostDataFormat)), // body data type must match "Content-Type" header
            }).then(function(response){
                return response.text();
            }).then(function(done,value) {
                var dataToSend = JSON.parse(done);
                for (var i = 0; i<dataToSend.data.ndarray.length;i++) {
                    vibrationAnomalySocketData.push({"timestamp": dataToSend.data.ndarray[i][0], "value": dataToSend.data.ndarray[i][1], "flag": dataToSend.data.ndarray[i][2]});
                }
                vibrationAnomalySocketData.splice(0,vibrationAnomalySocketData - 50);
                console.log(vibrationAnomalySocketData);
                return vibrationAnomalySocketData;
            }).catch(error => console.error(error));


        renderVibrationGraph();
        });
        socket.on('load_data', msg=>{
            msg = msg.filter(function (val, index) {
                if (val.timestamp < lastLoadDataTime) {
                    return false;
                } else {
                    lastLoadDataTime = val.timestamp;
                    return true;
                }
            });
            loadSocketData = loadSocketData.concat(msg);
            loadSocketData.sort(function(a, b){
                const keyA = a.timestamp,
                    keyB = b.timestamp;
                // Compare the 2 dates
                if(keyA < keyB) return -1;
                if(keyA > keyB) return 1;
                return 0;
            });
            loadSocketData = loadSocketData.filter((object, index, self) =>
                index === self.findIndex((o) => (
                    o.timestamp === object.timestamp && o.value === object.value
                ))
            );
            loadSocketData.splice(0, loadSocketData.length - 50);
            var minLoadTime = loadSocketData[0].timestamp;
            loadExpectedData = loadExpectedData.filter((ob) => {
                if (ob.timestamp < minLoadTime) {
                    return false;
                }
                return true;
            });
            if (loadSocketData.length > 1 && loadExpectedData.length > 1) {
                loadExpectedData.push({
                    timestamp: loadSocketData[loadSocketData.length - 1].timestamp,
                    value: thrustToExpectedLoad(thrust)
                });
                loadExpectedData.sort(function(a, b){
                    const keyA = a.timestamp,
                        keyB = b.timestamp;
                    // Compare the 2 dates
                    if(keyA < keyB) return -1;
                    if(keyA > keyB) return 1;
                    return 0;
                });
            }
//            console.log("Load data:", loadSocketData);
            renderLoadGraph();
        });
        socket.on('temperature_data', msg=>{
            var temperatureSocketData = msg;
            temperatureSocketData.sort(function(a, b){
                const keyA = a.timestamp,
                    keyB = b.timestamp;
                // Compare the 2 dates
                if(keyA < keyB) return -1;
                if(keyA > keyB) return 1;
                return 0;
            });
            if (temperatureSocketData.length > 0) {
                console.log("Temp: ", temperatureSocketData[(temperatureSocketData.length > 1 ? temperatureSocketData.length - 1 : 0)]);
            }
        });
        socket.on('changeThrustValue', msg=>{
            thrust = thrustToSpeed(parseInt(msg));
            console.log("Confirmed Thrust: " + thrust);
            segDisp.value(thrustToRPM(thrust));
            rpmGauge.value(thrustToRPM(thrust));
            render();
            loadExpectedData.push({
                timestamp: (new Date()).valueOf(),
                value: thrustToExpectedLoad(thrust)
            });
            thermometer.render(thermoContainer, Math.floor(Math.random() * (41 - 4) + 4), 4, 40);
        });
    }
    function changeThrust(val) {
        console.log("Triggered changeThrust");
        socket.emit('changeThrust', '' + val, function (d) {
            console.log("valueChanged");
        });
    }
});
    </script>
    

    
</body>
</html>
